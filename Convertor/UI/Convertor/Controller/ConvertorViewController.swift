//
//  ConvertorViewController.swift
//  Convertor
//
//  Created George Kyrylenko on 9/3/18.
//  Copyright © 2018 George Kyrylenko. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ConvertorViewController: UIViewController, ConvertorViewProtocol {


	var presenter: ConvertorPresenterProtocol?
    
    @IBOutlet weak var USDsaleLbl: UILabel!
    @IBOutlet weak var RURsaleLbl: UILabel!
    @IBOutlet weak var EURsaleLbl: UILabel!
    
    @IBOutlet weak var EURpurchaseLbl: UILabel!
    @IBOutlet weak var USDpurchaseLbl: UILabel!
    @IBOutlet weak var RURpurchaseLbl: UILabel!
    
    @IBOutlet weak var NBUTableView: UITableView!
    
    
    @IBOutlet weak var privateDate: UIButton!
    var privateResponse = PrivateResponse(){
        didSet{
            DispatchQueue.main.async {
                self.updatePrivateView()
            }
        }
    }
    
    var nbuResponse = [NBUResponse](){
        didSet{
            DispatchQueue.main.async {
                self.NBUTableView.reloadData()
            }
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        ConvertorRouter.createModule(view: self)
        self.presenter?.getPrivateCurrency(date: Date().timeIntervalSince1970)
        self.presenter?.getNBUCurrency(date: Date().timeIntervalSince1970)
    }

    func setPrivateCurrency(response: PrivateResponse) {
        privateResponse = response
    }
    
    func setNBUCurrency(response: [NBUResponse]) {
        nbuResponse = response
    }
    
    
    @IBAction func privateSelectDate(_ sender: Any) {
        createDatePickerAlert(title: "Выбор даты", message: nil, maxDate: nil, minDate: nil) { (date) in
            self.presenter?.getPrivateCurrency(date: Double(date))
        }
    }
    
    @IBAction func nbuSelectDate(_ sender: UIButton) {
        createDatePickerAlert(title: "Выбор даты", message: nil, maxDate: nil, minDate: nil) { (date) in
            let dateVal = Date(timeIntervalSince1970: Double(date))
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "dd.MM.yyyy"
            sender.setTitle(dateFormatter.string(from: dateVal), for: .normal)
            self.presenter?.getNBUCurrency(date: Double(date))
        }
    }
    
    func updatePrivateView() {
        
        privateDate.setTitle(privateResponse.date ?? "Дата", for: .normal)
        privateResponse.exchangeRate?.map({ (currency) -> Void in
            if currency.currency == "EUR"
            {
                EURsaleLbl.text =  String(currency.saleRate ?? 0)
                EURpurchaseLbl.text = String(currency.purchaseRate ?? 0)
            }
            
            if currency.currency == "USD"
            {
                USDsaleLbl.text =  String(currency.saleRate ?? 0)
                USDpurchaseLbl.text = String(currency.purchaseRate ?? 0)
            }
            
            if currency.currency == "RUB"
            {
                RURsaleLbl.text =  String(currency.saleRate ?? 0)
                RURpurchaseLbl.text = String(currency.purchaseRate ?? 0)
            }
        })
    }
    
    @IBAction func EURTap(_ sender: Any) {
        for (index, currency) in nbuResponse.enumerated(){
            if currency.CurrencyCodeL == "EUR"{
                scrollToItem(index: index)
            }
        }
    }
    @IBAction func USDTap(_ sender: Any) {
        for (index, currency) in nbuResponse.enumerated(){
            if currency.CurrencyCodeL == "USD"{
                scrollToItem(index: index)
            }
        }

    }
    @IBAction func RUBTap(_ sender: Any) {
        for (index, currency) in nbuResponse.enumerated(){
            if currency.CurrencyCodeL == "RUB"{
                scrollToItem(index: index)
            }
        }

    }
    
    func scrollToItem(index: Int){
        let indexPath = IndexPath(row: index, section: 0)
        NBUTableView.scrollToRow(at: indexPath, at: .middle, animated: true)
    }
}
